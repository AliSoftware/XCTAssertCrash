trigger:
- master

schedules:
- cron: "0 4 * * *"
  displayName: Nightly build with latest snapshots
  branches:
    include: 
    - master
  always: true

jobs:
- job: linux
  condition: ne(variables['Build.Reason'], 'Schedule')
  pool:
    vmImage: 'Ubuntu 16.04'
  strategy:
    maxParallel: 10
    matrix:
      swift50:
        containerImage: norionomura/swiftlint:swift-5.0
  container: $[ variables['containerImage'] ]
  steps:
    - script: swift test --parallel
      displayName: swift test
    - script: |
        set -o pipefail
        mkdir -p build/reports/
        swiftlint lint --reporter junit > build/reports/swiftlint.xml
      displayName: swiftlint
      condition: contains(variables['containerImage'], 'swiftlint')
    - task: PublishTestResults@2
      inputs:
        testRunner: JUnit
        testResultsFiles: build/reports/**

- job: macOS
  condition: ne(variables['Build.Reason'], 'Schedule')
  pool:
    vmImage: 'macOS 10.14'
  strategy:
    maxParallel: 10
    matrix:
      xcode102:
        DEVELOPER_DIR: /Applications/Xcode_10.2.app
        XCODE_FLAGS_FOR_TEST: -parallel-testing-enabled NO
      xcode11:
        DEVELOPER_DIR: /Applications/Xcode_11.app
        XCODE_FLAGS_FOR_TEST: -parallel-testing-enabled NO
  steps:
    - script: |
        xcodebuild -version
        echo "##vso[task.setvariable variable=XCODE_FLAGS]-project XCTAssertCrash.xcodeproj -scheme XCTAssertCrash-Package $XCODE_FLAGS_FOR_TEST"
      displayName: xcodebuild -version & set XCODE_FLAGS
    - script: >
        set -o pipefail &&
        xcodebuild $XCODE_FLAGS test |
        xcpretty -r junit -o build/reports/xcodebuild-macos.xml
      displayName: tests on macOS
      condition: succeededOrFailed()
    - script: >
        set -o pipefail &&
        xcodebuild $XCODE_FLAGS test -sdk iphonesimulator -destination "name=iPhone 8" |
        xcpretty -r junit -o build/reports/xcodebuild-iOS.xml
      displayName: tests on iOS
      condition: succeededOrFailed()
    - script: >
        set -o pipefail &&
        xcodebuild $XCODE_FLAGS test -sdk appletvsimulator -destination "name=Apple TV 4K" |
        xcpretty -r junit -o build/reports/xcodebuild-tvOS.xml
      displayName: tests on tvOS
      condition: succeededOrFailed()
    - script: >
        set -o pipefail &&
        swift test --parallel
      displayName: swift test
      condition: succeededOrFailed()
    - task: PublishTestResults@2
      inputs:
        testRunner: JUnit
        testResultsFiles: build/reports/**
      condition: succeededOrFailed()

- job: Analyze
  condition: ne(variables['Build.Reason'], 'Schedule')
  pool:
    vmImage: 'macOS 10.14'
  variables:
    DEVELOPER_DIR: /Applications/Xcode_10.2.app
  steps:
    - script: xcodebuild -scheme XCTAssertCrash-Package -project XCTAssertCrash.xcodeproj clean build-for-testing > xcodebuild.log
      displayName: Generate xcodebuild.log
    - script: HOMEBREW_NO_AUTO_UPDATE=1 brew install https://raw.github.com/Homebrew/homebrew-core/master/Formula/swiftlint.rb
      displayName: Install SwiftLint
    - script: swiftlint analyze --strict --compiler-log-path xcodebuild.log
      displayName: Run SwiftLint Analyze

- job: linux_swift51
  displayName: linux swift51
  pool:
    vmImage: 'Ubuntu 16.04'
  container: norionomura/swift:swift-5.1-branch
  steps:
    - script: swift test --parallel
      displayName: swift test
